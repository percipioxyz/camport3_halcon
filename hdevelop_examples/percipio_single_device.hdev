<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="19.11.0.0">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l>AcqName := 'Percipio'</l>
<l>info_framegrabber (AcqName, 'general', GeneralInfo, GeneralValues)</l>
<l>info_framegrabber (AcqName, 'info_boards', InfoBoardsInfo, InfoBoardsValues)</l>
<l>info_framegrabber (AcqName, 'defaults', DefaultsInfo, DefaultsValues)</l>
<l>info_framegrabber (AcqName, 'parameters', ParametersInfo, ParametersValues)</l>
<l>info_framegrabber (AcqName, 'ports', PortsInfo, PortsValues)</l>
<l>info_framegrabber (AcqName, 'revision', RevisionInfo, RevisionValues)</l>
<l>info_framegrabber (AcqName, 'bits_per_channel', BitsPerChannelInfo, BitsPerChannelValues)</l>
<l>info_framegrabber (AcqName, 'color_space', ColorSpaceInfo, ColorSpaceValues)</l>
<l>info_framegrabber (AcqName, 'device', DeviceInfo, DeviceValues)</l>
<l>info_framegrabber (AcqName, 'external_trigger', TriggerInfo, TriggerValues)</l>
<l>info_framegrabber (AcqName, 'horizontal_resolution', HorizontalResolutionInfo, HorizontalResolutionValues)</l>
<l>info_framegrabber (AcqName, 'vertical_resolution', VerticalResolutionInfo, VerticalResolutionValues)</l>
<l>info_framegrabber (AcqName, 'camera_type', CameraTypeInfo, CameraTypeValues)</l>
<c></c>
<l>dev_open_window (0, 0, 1280, 960, 'black', WindowHandle)</l>
<c></c>
<c></c>
<l>imageType := 'rgb_640x480'             //choose rgb/depth/point3d/rgbp here</l>
<l>trigger   := 'false'</l>
<l>cameraType1:= CameraTypeValues[1]</l>
<l>deviceID1  := DeviceValues[1]</l>
<c></c>
<c></c>
<l>open_framegrabber ('Percipio', 0, 0, 0, 0, 0, 0, 'default', -1, imageType, -1, trigger, cameraType1, deviceID1, -1, -1, AcqHandle)</l>
<l>get_framegrabber_param (AcqHandle, 'revision', Revision)</l>
<l>get_framegrabber_param (AcqHandle, 'color_space', Color_space)</l>
<l>get_framegrabber_param (AcqHandle, 'horizontal_resolution', horizontal_resolution)</l>
<l>get_framegrabber_param (AcqHandle, 'vertical_resolution', vertical_resolution)</l>
<l>get_framegrabber_param (AcqHandle, 'camera_para', camera_para)</l>
<l>get_framegrabber_param (AcqHandle, 'num_buffers', num_buffers)</l>
<l>get_framegrabber_param (AcqHandle, 'grab_timeout', grab_timeout)</l>
<l>get_framegrabber_param (AcqHandle, 'image_width', image_width)</l>
<l>get_framegrabber_param (AcqHandle, 'image_height', image_height) </l>
<l>get_framegrabber_param (AcqHandle, 'external_trigger', external_trigger) </l>
<l>get_framegrabber_param (AcqHandle, 'device', device) </l>
<l>get_framegrabber_param (AcqHandle, 'camera_type', camera_type) </l>
<c></c>
<l>grab_image_start (AcqHandle, -1)</l>
<c></c>
<l>while (true)</l>
<l>    dev_set_window (WindowHandle)</l>
<l>    if(imageType = 'rgb_1280x960' or imageType = 'rgb_640x480' or imageType = 'rgb_320x240')</l>
<l>        grab_image_async (rgb_image, AcqHandle, -1)</l>
<l>        dev_display (rgb_image)</l>
<l>    endif</l>
<l>    if (imageType = 'depth_1280x960' or imageType = 'depth_640x480' or imageType = 'depth_320x240')</l>
<l>        depth (ImageConverted, AcqHandle)</l>
<l>        dev_display (ImageConverted)</l>
<l>    endif</l>
<l>    if (imageType = 'point3d_1280x960' or imageType = 'point3d_640x480' or imageType = 'point3d_320x240')</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>        decompose3 (Image, X, Y, Z)</l>
<l>        get_image_type (Image, Type)</l>
<l>        get_image_size (Image, Width, Height)</l>
<l>        scale_image (X, Xs, 0.001, 0)</l>
<l>        scale_image (Y, Ys, 0.001, 0)</l>
<l>        scale_image (Z, Zs, 0.001, 0)     </l>
<c>        </c>
<l>        xyz_to_object_model_3d (Xs, Ys, Zs, ObjectModel3D)</l>
<l>        visualize_object_model_3d (WindowHandle, ObjectModel3D, [], [], [], [], [], [], [], PoseItem)  </l>
<l>    endif</l>
<l>    if (imageType = 'rgbp_1280x960' or imageType = 'rgbp_640x480' or imageType = 'rgbp_320x240')</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>        decompose6(Image,Image1,Image2,Image3,X,Y,Z)</l>
<l>        compose3(Image1,Image2, Image3, Multichannel)</l>
<l>        scale_image (X, Xs, 0.001, 0)</l>
<l>        scale_image (Y, Ys, 0.001, 0)</l>
<l>        scale_image (Z, Zs, 0.001, 0)      </l>
<l>        xyz_to_object_model_3d (Xs, Ys, Zs, ObjectModel3D)</l>
<l>        visualize_object_model_3d (WindowHandle, ObjectModel3D, [], [], [], [], [], [], [], PoseItem)  </l>
<l>        dev_display (Multichannel)</l>
<l>    endif            </l>
<l>endwhile</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[4,1]" as_ord="1">close_framegrabber (AcqHandle)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_close_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="yuv">
<interface>
<oo>
<par name="Multichannel" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>        decompose3(Image,Image1,Image2,Image3)</l>
<l>        trans_to_rgb(Image1,Image2,Image3,ImageRed,ImageGreen,ImageBlue,'yuv')</l>
<l>        compose3(ImageRed,ImageGreen,ImageBlue,Multichannel)</l>
<l>return ()</l>
</body>
<docu id="yuv">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Multichannel"/>
</parameters>
</docu>
</procedure>
<procedure name="depth">
<interface>
<oo>
<par name="ImageConverted" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>        convert_image_type (Image, ImageConverted, 'real')</l>
<l>return ()</l>
</body>
<docu id="depth">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="ImageConverted"/>
</parameters>
</docu>
</procedure>
</hdevelop>
