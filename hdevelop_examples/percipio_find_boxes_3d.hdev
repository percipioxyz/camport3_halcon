<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="19.11.0.0">
<procedure name="main">
<interface/>
<body>
<c>* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l>AcqName := 'Percipio'</l>
<c></c>
<l>info_framegrabber (AcqName, 'device', DeviceInfo, DeviceValues)</l>
<l>info_framegrabber (AcqName, 'camera_type', CameraTypeInfo, CameraTypeValues)</l>
<c></c>
<l>dev_open_window (0, 0, 1280, 960, 'black', WindowHandle)</l>
<c></c>
<c></c>
<l>imageType := 'point3d_1280x960'             //choose rgb/depth/point3d/rgbp here</l>
<l>trigger   := 'false'</l>
<l>cameraType1:= CameraTypeValues[1]</l>
<l>deviceID1  := DeviceValues[1]</l>
<c></c>
<c></c>
<l>open_framegrabber ('Percipio', 0, 0, 0, 0, 0, 0, 'default', -1, imageType, -1, trigger, cameraType1, deviceID1, -1, -1, AcqHandle)</l>
<c></c>
<l>grab_image_start (AcqHandle, -1)</l>
<c></c>
<l>RobotToolSize := 0.03</l>
<l>gen_robot_tool_and_base_object_model_3d (RobotToolSize * 0.05, RobotToolSize, OM3DToolOrigin, OM3DBase)</l>
<l>Pose := []</l>
<c></c>
<l>while (true)</l>
<l>    dev_set_window (WindowHandle)</l>
<c></c>
<l>    if (imageType = 'point3d_1280x960' or imageType = 'point3d_640x480' or imageType = 'point3d_320x240')</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>        decompose3 (Image, X, Y, Z)</l>
<l>        get_image_type (Image, Type)</l>
<l>        get_image_size (Image, Width, Height)</l>
<l>        scale_image (X, Xs, 0.001, 0)</l>
<l>        scale_image (Y, Ys, 0.001, 0)</l>
<l>        scale_image (Z, Zs, 0.001, 0)     </l>
<c>        </c>
<l>        xyz_to_object_model_3d (Xs, Ys, Zs, ObjectModel3D)</l>
<c></c>
<c>        * </c>
<c>        * Set the side lengths with tolerances of the box in meter.</c>
<l>        Len1 := [0.15,0.22]</l>
<l>        Len2 := [0.12,0.18]</l>
<l>        Len3 := [0.08,0.12]</l>
<c>     </c>
<c>        * Set box detection parameters.</c>
<l>        create_dict (Params)</l>
<l>        set_dict_tuple (Params, 'remove_outer_edges', 'true')</l>
<l>        set_dict_tuple (Params, 'max_gap', 150)</l>
<l>        set_dict_tuple (Params, 'box_type', 'full_box_visible')</l>
<l>        set_dict_tuple (Params, '3d_edge_min_amplitude', 0.006)</l>
<l>        set_dict_tuple (Params, 'max_num_boxes', 5)</l>
<c>        * Find the boxes.1Len3</c>
<l>        find_box_3d (ObjectModel3D, Len2, Len1, Len3, 0.05, Params, GrippingPose, Score, OM3DBox, BoxInformation)</l>
<c>    </c>
<c>        * The procedure debug_find_box_3d can be used to debug the</c>
<c>        * results of find_box_3d.</c>
<l>        *debug_find_box_3d (OM3DBox, ObjectModel3D, BoxInformation, FindBox3DGenParam)</l>
<c>        * </c>
<c>        * Visualize the found boxes and the gripping poses.</c>
<c>    </c>
<l>        GripTools := []</l>
<l>        Colors := []</l>
<l>        for Index := 0 to |Score| - 1 by 1</l>
<l>            rigid_trans_object_model_3d (OM3DToolOrigin, GrippingPose[7 * Index:7 * Index + 6], OM3DToolTransformed)</l>
<l>            GripTools := [GripTools,OM3DToolTransformed]</l>
<c>            * Determine color of the gripping point</c>
<c>            * coordiante system in RGB.</c>
<l>            Colors := [Colors,'red','green','blue']</l>
<l>        endfor</l>
<c>    </c>
<l>        get_dict_tuple (BoxInformation, 'sampled_scene', OM3DSampledScene)</l>
<l>        get_dict_tuple (BoxInformation, 'sampled_edges', OM3DSampledEdges)</l>
<l>        gen_visualization_title (BoxInformation, Title)</l>
<c>    </c>
<l>        Colors := [Colors,gen_tuple_const(|OM3DBox|,'green'),'yellow','gray']</l>
<l>        Labels := [gen_tuple_const(3 * |OM3DBox|,''),Score$'.2f','','']</l>
<l>        visualize_object_model_3d (WindowHandle, [GripTools,OM3DBox,OM3DSampledEdges,OM3DSampledScene], [], Pose, ['color_' + [0:4 * |OM3DBox| + 2 - 1],'alpha_' + [3 * |OM3DBox|:4 * |OM3DBox| - 1]], [Colors,gen_tuple_const(|OM3DBox|,0.5)], Title, Labels, [], Pose)       </l>
<l>        endif         </l>
<l>endwhile</l>
<c></c>
<l>close_framegrabber (AcqHandle)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_close_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="dev_disp_introduction">
<interface/>
<body>
<l>ContinueMessage := 'Press Run (F5) to continue'</l>
<l>Message := ['We want to find the pose of boxes in a 3D scene in order to grip them with a robot.','To accomplish this, we:','    1. Read a scene with a XYZ-mapping,','    2. Create a 3D object model of the scene,','    3. Call find_box_3d and','    4. Visualize the results.','','find_box_3d returns a GrippingPose for each found box that is within the size range','specified in the call to find_box_3d. This GrippingPose can be provided to a hand-eye','calibrated robot to grip the found boxes.','','In most application scenarios, the 3D scene has to be preprocessed in order to find','generic boxes fast and robust. The documentation provides detailed descriptions how to','prepare your data or how to troubleshoot in case of problems.']</l>
<l>dev_disp_text (Message, 'window', 'top', 'left', 'white', 'box', 'false')</l>
<l>dev_disp_text (ContinueMessage, 'window', 'bottom', 'right', 'black', [], [])</l>
<l>return ()</l>
</body>
<docu id="dev_disp_introduction">
<parameters/>
</docu>
</procedure>
<procedure name="gen_visualization_title">
<interface>
<ic>
<par name="BoxInformation" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Title" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Is2DOnly := 1</l>
<l>get_dict_tuple (BoxInformation, 'results', BoxResult)</l>
<l>get_dict_param (BoxResult, 'keys', [], BoxIndices)</l>
<l>tuple_length (BoxIndices, BoxNumber)</l>
<c>* </c>
<l>for Index := 0 to BoxNumber by 1</l>
<l>    get_dict_tuple (BoxResult, 0, BoxIndex)</l>
<l>    get_dict_tuple (BoxIndex, 'one_side_only', Is2D)</l>
<l>    if (Is2D != 'true')</l>
<l>        Is2DOnly := 0</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<l>if (Is2DOnly)</l>
<l>    Title := 'The visible side and the computed gripping pose are displayed for each box found.'</l>
<l>else</l>
<l>    Title := 'If more than one side of a box is visible, the box can be fully displayed.'</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="gen_visualization_title">
<parameters>
<parameter id="BoxInformation"/>
<parameter id="Title"/>
</parameters>
</docu>
</procedure>
<procedure name="depth">
<interface>
<oo>
<par name="ImageConverted" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>grab_image_async (Image, AcqHandle, -1)</l>
<l>convert_image_type (Image, ImageConverted, 'real')</l>
<l>return ()</l>
</body>
<docu id="depth">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="ImageConverted"/>
</parameters>
</docu>
</procedure>
</hdevelop>
